apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: jenkins-final-template
spec:
  healthRule:
    singleConditionType: Succeeded # Need a healthRule that matches with a successful execution and status of the stamped object
  lifecycle: tekton
  params:
  - default: default
    name: serviceAccount
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def merged_tekton_params():
    #@   params = []
    #@   if hasattr(data.values, "params") and hasattr(data.values.params, "jenkins_final_pipeline_params"):
    #@     for param in data.values.params["jenkins_final_pipeline_params"]:
    #@       params.append({"name": param, "value": data.values.params["jenkins_final_pipeline_params"][param]})
    #@     end
    #@   end
    #@   params.append({"name": "gitops_repo", "value": json.encode(data.values.config[0].value)})
    #@   params.append({"name": "gitops_branch", "value": json.encode(data.values.config[1].value)})
    #@   params.append({"name": "gitops_subpath", "value": json.encode(data.values.config[6].value)})
    #@   return params
    #@ end

    ---
    apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: #@ data.values.workload.metadata.name + "-"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "jenkins-final" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      pipelineRef:
        name: developer-defined-jenkins-final-tekton-pipeline
      params: #@ merged_tekton_params()